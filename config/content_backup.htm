<h1>introduction</h1>
<p><span>Group website: <a href="https://40823111.github.io/stage1-ag6/content/index.html">stage1</a></span></p>
<p><span>     respostory: </span></p>
<p><span>Group website: <a href="https://40823111.github.io/stage2-ag6/content/index.html">stage2</a></span></p>
<p><span>     respostory:</span></p>
<p>Group member</p>
<p><span>40823111  <a href="https://40823111.github.io/cd2021/content/index.html">許耀中</a></span></p>
<p><span>40823120  <a href="https://40823120.github.io/cd2021/content/index.html">范維倫</a></span></p>
<p><span>40823124  <a href="http://40823124.github.io/cd2021">廖璟承</a></span></p>
<p><span>40823139  <a href="http://40823139.github.io/cd2021">王銘楫</a></span></p>
<h1>week</h1>
<h2>week6</h2>
<p><span>題目 : 1.棒球打擊模擬</span></p>
<ol>
<li>一個平台(棒球場) 球打出去後可以接球(防守者) 漏接的球可以自動流回輸送台，再次被送回來</li>
<li>使用類似螺紋的概念把球輸送到想要的平台</li>
<li>希望可以把球的軌跡沿著螺旋線上升</li>
<li>做成一個循迴機構</li>
</ol>
<p>主要物件: 2隻機械手臂(王銘楫和廖璟承) 平台和送球機構(許耀中和范維倫)</p>
<h2>week7</h2>
<h3>CoppeliaSim模擬與運送機構創建</h3>
<p>整體運用重點:</p>
<ol>
<li>向本週主軸:CoppeliaSim模擬與運送機構創建</li>
</ol>
<p>整體運用重點:</p>
<ol>
<li>IK逆運動學</li>
<li>正向運動學</li>
<li>送球機構創建</li>
</ol>
<p>本週問題:</p>
<ol>
<li>多軸手臂的運動預測</li>
<li>送球機構創建未果</li>
<li>球受力後的運動路徑預測</li>
</ol>
<p>問題改善:</p>
<ol>
<li>藉由DH法做運動預期</li>
<li>加入運動學運算</li>
</ol>
<h3>CoppeliaSim模擬 手動操控機械手臂</h3>
<p><span>整體運用重點:</span></p>
<ol>
<li>向本週主軸:CoppeliaSim模擬與運送機構創建</li>
</ol>
<p><span>整體運用重點:</span></p>
<p><span>     1.lua 產生路徑</span></p>
<p>     2.<span>鍵盤ASCII控制字符</span></p>
<p>本週問題:</p>
<p>     1.<span>控制關節時，每個關節所設置的位置與阻尼參數不同，會有抖動的情形發生</span></p>
<p>     2.關節2的部分因為承受整隻手臂的絕大重量，所以轉動到了一定角度後會因為自身重量而倒下</p>
<p><span>問題改善:</span></p>
<p>    1.<span>所有的參數都設成一樣的並把馬達改成控制模式</span></p>
<p><span>    2.每隻關節都設置了轉動條件，限制轉動的次數，且設置了兩個參數控制互鎖，並用自身相加方式達成        可以重複接收訊號，另外關節2在關節與程式另有限制轉動的角度跟輸入次數，當按下按鍵一定次數          後 必須往反方向轉動，否則互鎖。</span></p>
<p><span><img alt="" height="709" src="/images/1.jpg" width="554"/></span></p>
<p><span></span></p>
<p></p>
<h3>機械結構</h3>
<p>第一次模擬<span>→ 失敗</span></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="allowfullscreen" frameborder="0" height="315" src="https://www.youtube.com/embed/Y33taPcSXP0" title="YouTube video player" width="560"></iframe></p>
<p>遇到問題:</p>
<p>因為我們是設計螺旋線的上升機構， 所以到輸送平台時把它用直線，導致不符合公差尺寸而跑掉</p>
<p>解決1. <span>改善後 把它改成符合螺旋線的入口</span></p>
<p>改善前</p>
<p><img alt="" height="1060" src="/images/44085.jpg" width="597"/></p>
<p><span>改善後</span></p>
<p><img alt="" height="447" src="/images/messageImage_1618473034644.jpg" width="567"/></p>
<p></p>
<p></p>
<h2>week8</h2>
<p>本週主軸:機械手臂程式撰寫與送球機構修改</p>
<p>整體運用重點:</p>
<ol>
<li>Lua語言</li>
</ol>
<p>本週問題:</p>
<ol>
<li>送球機構運動結果未達預期</li>
<li>球到達定點前即掉落</li>
<li>手臂運動路徑不夠近似真實擊球</li>
</ol>
<p>問題改善:</p>
<ol>
<li>擋板修改</li>
<li>修改至接近真人手臂擊球的動作</li>
</ol>
<h3><span>機械手臂程式</span></h3>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">threadFunction=function()
    while sim.getSimulationState()~=sim.simulation_advancing_abouttostop do
        -- Read the keyboard messages (make sure the focus is on the main window, scene view):
        message,auxiliaryData=sim.getSimulatorMessage()
        while message~=-1 do
            if (message==sim.message_keypress) then
                if (auxiliaryData[1]==97) then
                    -- d key
                    if(o &lt; i*10) then
                    o = o+i
                    velocity=velocity+0.11
                    torque=torque+0.1
                    hammer_back = 0
                    end
                end
                if (auxiliaryData[1]==100) then
                    -- a key 
                    if(o &gt; -i*10) then
                    o = o-i
                    velocity=velocity-0.11
                    torque=torque-0.1
                    hammer_back = 1
                    end
                end
                
            end
            message,auxiliaryData=sim.getSimulatorMessage()
        end
 
        -- We take care of setting the desired hammer position:
        if hammer_back == 1
            then 
               sim.setJointPosition(joint, -1, orientation)
               --sim.setObjectPosition(hammer,-1, position)
        end
        sim.setJointTargetPosition(joint, velocity)
        --sim.setJointForce(joint,torque)

        -- Since this script is threaded, don't waste time here:
        sim.switchThread() -- Resume the script at next simulation loop start
    end
end
-- Put some initialization code here:
-- Retrieving of some handles and setting of some initial values:
i = 1
o = i*1
joint=sim.getObjectHandle('redundantRob_joint1')
hammer=sim.getObjectHandle('Rectangle')
velocity=0
hammer_back=0
torque=0
sliding = 0
orientation=sim.getJointPosition(joint, -1)
position=sim.getObjectPosition(hammer,-1)
-- Here we execute the regular thread code:
res,err=xpcall(threadFunction,function(err) return debug.traceback(err) end)
if not res then
    sim.addStatusbarMessage('Lua runtime error: '..err)
end
 
-- Put some clean-up code here:
</pre>
<h2>week9</h2>
<p>重點總結</p>
<ul>
<li>機器手臂運動</li>
<li>運動學</li>
<li>Lua程式認知</li>
<li>送球機構修改</li>
</ul>
<p>專案檢討</p>
<ul>
<li>同步情形略有改善</li>
<li>分工領域較上次精確</li>
<li>預想模型較上次合理</li>
<li>協同增加分工的效率</li>
</ul>
<p>總結:</p>
<p>此次專案較stage-1分工更加明確，各領域負責者各司其職，並未因人數增加而導致部分人員偷懶。</p>
<p>在具有stage-1的基礎知識之下，研讀其他文獻時理解也更加快速!</p>
<p>機構預想上較stage-1更加縝密，減少了過於理想化的情況，也因此修改的時間花費更少。</p>
<h1>成品</h1>
<p><span></span></p>
<p><span></span></p>
<p><span></span></p>